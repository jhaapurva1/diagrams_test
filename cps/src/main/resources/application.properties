#spring
spring.application.name=${APPLICATION_NAME}
server.port=${PORT:7070}
spring.profiles.active=${ENV}
spring.jpa.open-in-view=false
spring.jmx.enabled=true
# tomcat
server.tomcat.mbeanregistry.enabled=true
#mysql
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.initializationFailTimeout=1000
spring.datasource.maximumPoolSize=${DB_MYSQL_MAX_POOL:1}
spring.datasource.minIdle=${DB_MYSQL_MIN_POOL:1}
spring.datasource.validationQuery=SELECT 1
spring.datasource.idleTimeout=1800000
spring.datasource.maxLifetime=3600000
spring.datasource.connectionTimeout=15000
spring.datasource.url=${DB_MYSQL_HOST}
spring.datasource.username=${DB_MYSQL_USERNAME}
spring.datasource.password=${DB_MYSQL_PASSWORD}
hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
hibernate.show_sql=false
#redis
redis.host=${REDIS_HOST}
redis.port=${REDIS_PORT:6379}
redis.password=${REDIS_PASSWORD:dev-pass}
redis.command.timeout=${REDIS_COMMAND_TIMEOUT}
redis.shutdown.timeout=${REDIS_SHUTDOWN_TIMEOUT}
redis.client.name=cps
redis.updated_campaign_catalogs_set.partition_count=${REDIS_UPDATED_CAMPAIGN_CATALOGS_SET_PARTITION_COUNT:1}
redis.updated_campaign_catalogs_set.batch_size=${REDIS_UPDATED_CAMPAIGN_CATALOGS_SET_BATCH_SIZE:100}
#hbase
hbase.zookeeper.host=${HBASE_ZOOKEEPER_HOST}
hbase.zookeeper.port=2181
hbase.zookeeper.recovery.retries=1
hbase.client.pause=1000
hbase.client.retries=3
hbase.rpc.timeout=15000
#redshift
redshift.url=${REDSHIFT_URL}
redshift.username=${REDSHIFT_USERNAME}
redshift.password=${REDSHIFT_PASSWORD}
auth.tokens=${AUTH_TOKENS}
#logging
log_disabled_paths=swagger,api-docs,csrf,health
#cronitor
cron.cronitor.url=https://cronitor.link/
#rest
api.default.connect.timeout.ms=${API_DEFAULT_CONNECT_TIMEOUT_MS:2000}
api.default.read.timeout.ms=${API_DEFAULT_READ_TIMEOUT_MS:2000}

#AD Service config
rest-client.ad-service.host=${AD_SERVICE_HOST}
rest-client.ad-service.port=${AD_SERVICE_PORT}
rest-client.ad-service.secret=${AD_SERVICE_SECRET}
rest-client.ad-service.http-config.max-per-route=${AD_HTTP_MAX_PER_ROUTE}
rest-client.ad-service.http-config.max-total=${AD_HTTP_MAX_TOTAL}
rest-client.ad-service.http-config.connect-timeout=${AD_HTTP_CONNECT_TIMEOUT}
rest-client.ad-service.http-config.socket-timeout=${AD_HTTP_SOCKET_TIMEOUT}
rest-client.ad-service.http-config.connection-request-timeout=${AD_HTTP_CONN_REQUEST_TIMEOUT}
#Prism Service config
rest-client.prism-service.host=${PRISM_SERVICE_HOST}
rest-client.prism-service.username=${PRISM_SERVICE_USERNAME}
rest-client.prism-service.secret=${PRISM_SERVICE_SECRET}
rest-client.prism-service.http-config.max-per-route=${PRISM_HTTP_MAX_PER_ROUTE}
rest-client.prism-service.http-config.max-total=${PRISM_HTTP_MAX_TOTAL}
rest-client.prism-service.http-config.connect-timeout=${PRISM_HTTP_CONNECT_TIMEOUT}
rest-client.prism-service.http-config.socket-timeout=${PRISM_HTTP_SOCKET_TIMEOUT}
rest-client.prism-service.http-config.connection-request-timeout=${PRISM_HTTP_CONN_REQUEST_TIMEOUT}
#campaign performance redshift
scheduler.campaign.performance.enable=${SCHEDULER_CAMPAIGN_PERFORMANCE_ENABLE:{'IN':false}}
scheduler.campaign.performance.monitor.code=${SCHEDULER_CAMPAIGN_PERFORMANCE_MONITOR_CODE:{'IN':'b2B0oA'}}
scheduler.campaign.performance.cron.expression=${SCHEDULER_CAMPAIGN_PERFORMANCE_CRON_EXPRESSION:{'IN':'0 */10 * * * ?'}}
scheduler.campaign.performance.batch.size=${SCHEDULER_CAMPAIGN_PERFORMANCE_BATCH_SIZE:{'IN':1}}
scheduler.campaign.performance.process.batch.size=${SCHEDULER_CAMPAIGN_PERFORMANCE_PROCESS_BATCH_SIZE:{'IN':1}}
#ads deduction campaign supplier redshift scheduler
scheduler.ads.deduction.campaign.supplier.enable=${SCHEDULER_ADS_DEDUCTION_CAMPAIGN_ENABLE:{'IN':false}}
scheduler.ads.deduction.campaign.supplier.monitor.code=${SCHEDULER_ADS_DEDUCTION_CAMPAIGN_MONITOR_CODE:{'IN':'b2B0oA'}}
scheduler.ads.deduction.campaign.supplier.cron.expression=${SCHEDULER_ADS_DEDUCTION_CAMPAIGN_CRON_EXPRESSION:{'IN':'*/20 * * * * ?'}}
scheduler.ads.deduction.campaign.supplier.batch.size=${SCHEDULER_ADS_DEDUCTION_CAMPAIGN_BATCH_SIZE:{'IN':1}}
scheduler.ads.deduction.campaign.supplier.process.batch.size=${SCHEDULER_ADS_DEDUCTION_CAMPAIGN_PROCESS_BATCH_SIZE:{'IN':300}}
#real estate metadata cache sync scheduler
scheduler.real_estate_metadata.cache.sync.enable=${SCHEDULER_REAL_ESTATE_METADATA_CACHE_SYNC_ENABLE:{'IN':false}}
scheduler.real_estate_metadata.cache.sync.monitor.code=${SCHEDULER_REAL_ESTATE_METADATA_CACHE_SYNC_MONITOR_CODE:{'IN':'b2B0oA'}}
scheduler.real_estate_metadata.cache.sync.cron.expression=${SCHEDULER_REAL_ESTATE_METADATA_CACHE_SYNC_CRON_EXPRESSION:{'IN':'0 */10 * * * ?'}}
scheduler.real_estate_metadata.cache.sync.batch.size=${SCHEDULER_REAL_ESTATE_METADATA_CACHE_SYNC_BATCH_SIZE:{'IN':1}}
scheduler.real_estate_metadata.cache.sync.process.batch.size=${SCHEDULER_REAL_ESTATE_METADATA_CACHE_SYNC_PROCESS_BATCH_SIZE:{'IN':10}}
#campaign performance hbase ES sync scheduler
scheduler.campaign_performance_es_indexing.enable=${SCHEDULER_CAMPAIGN_PERFORMANCE_ES_INDEXING_ENABLE:{'IN':false}}
scheduler.campaign_performance_es_indexing.monitor.code=${SCHEDULER_CAMPAIGN_PERFORMANCE_ES_INDEXING_MONITOR_CODE:{'IN':'b2B0oA'}}
scheduler.campaign_performance_es_indexing.cron.expression=${SCHEDULER_CAMPAIGN_PERFORMANCE_ES_INDEXING_CRON_EXPRESSION:{'IN':'0 */10 * * * ?'}}
scheduler.campaign_performance_es_indexing.batch.size=${SCHEDULER_CAMPAIGN_PERFORMANCE_ES_INDEXING_BATCH_SIZE:{'IN':1}}

daily_budget_reset_time=${DAILY_BUDGET_RESET_TIME:00:00:00}
user_catalog_interaction_ttl_seconds=${USER_CATALOG_INTERACTION_TTL_SECONDS:21600}
user_catalog_interaction_window_in_seconds=${USER_CATALOG_INTERACTION_WINDOW_IN_SECONDS:30}
increment_view_hbase_batch_size=${INCREMENT_VIEW_BATCH_SIZE:5}
cache.ads.campaign.catalog.elements=${CACHE_ADS_CAMPAIGN_CATALOG_ELEMENTS:10000}
cache.ads.campaign.catalog.seconds=${CACHE_ADS_CAMPAIGN_CATALOG_SECONDS:300}
ad_service_fetch_ccm_batch_size=${AD_SERVICE_FETCH_CCM_BATCH_SIZE:20}

## elastic search configurations
elasticsearch.host=${ES_HOST}
elasticsearch.port=443
elasticsearch.host.scheme=https
elasticsearch.connect.timeout.ms=${ES_CONNECT_TIMEOUT_MS:200}
elasticsearch.socket.timeout.ms=${ES_SOCKET_TIMEOUT_MS:500}
elasticsearch.ioreactor.connections.count=${ES_CONNECTIONS:16}
elasticsearch.http-pool.max-per-route=${ES_CONN_MAX_PER_ROUTE:30}
elasticsearch.http-pool.max-total=${ES_CONN_MAX_PER_ROUTE:30}

es.campaign.catalog.month-wise.indices=${ES_CAMPAIGN_CATALOG_MONTH_WISE:cc_monthly}
es.campaign.catalog.date-wise.indices=${ES_CAMPAIGN_CATALOG_DATE_WISE:cc_daily}

campaign.date-wise.metrics.batch-size=${CAMPAIGN_DATE_WISE_METRICS_BATCH_SIZE:10}
campaign.date-wise.metrics.reference-date=${CAMPAIGN_DATE_WISE_METRICS_REFERENCE_DATE:2021-11-22}
backfill.date-wise.metrics.prism.batch-size = ${BACKFILL_DATE_WISE_METRICS_PRISM_BATCH_SIZE:20}

#Kafka Config
#common-kafka-config
kafka.common.bootstrap.servers=${COMMON_BOOTSTRAP_SERVERS}

#ads kafka config
kafka.ad.service.bootstrap.servers=${ADS_KAFKA_BOOTSTRAP_SERVERS}

#ingestion-kafka-config
kafka.ingestion.bootstrap.servers=${INGESTION_BOOTSTRAP_SERVERS}
kafka.ingestion.consumer.avro.schema.registry.url=${CLICK_EVENT_CONSUMER_AVRO_SCHEMA_REGISTRY_URL:http://bac-s-ingestion-schema.internal.meeshotest.in}

#ingestion-confluent-kafka-config
kafka.ingestion.confluent.bootstrap.servers=${INGESTION_CONFLUENT_BOOTSTRAP_SERVERS}
kafka.ingestion.confluent.consumer.avro.schema.registry.url=${CLICK_EVENT_CONSUMER_CONFLUENT_AVRO_SCHEMA_REGISTRY_URL:http://bac-s-ingestion-schema.internal.meeshotest.in}
kafka.ingestion.confluent.sasl_config.username=${INGESTION_CONFLUENT_SASL_CONFIG_USERNAME}
kafka.ingestion.confluent.sasl_config.password=${INGESTION_CONFLUENT_SASL_CONFIG_PASSWORD}
kafka.ingestion.confluent.consumer.offset.commit.time=${INGESTION_CONFLUENT_OFFSET_COMMIT_TIME:10000}

#payout kafka config
kafka.payout.bootstrap.servers = ${PAYOUT_BOOTSTRAP_SERVERS:kafka.demandqa.internal.meeshotest.in:9092}

#kafka topics
kafka.budget_exhausted.topic=${KAFKA_BUDGET_EXHAUSTED_TOPIC:cps.budget_exhuasted}
kafka.supplier.weekly.budget.exhausted.topic=${KAFKA_SUPPLIER_WEEKLY_BUDGET_EXHAUSTED_TOPIC:cps.supplier_budget_exhausted_events}
kafka.ads.cost.deduction.topic=${ADS_COST_DEDUCTION_TOPIC:sp.other_business_payments}

#consumer constants
#campaign-catalog-update consumer
kafka.campaign_catalog_update.event.consumer.id=${CAMPAIGN_CATALOG_UPDATE_CONSUMER_ID:cpsCampaignCatalogUpdateEventConsumer}
kafka.campaign_catalog_update.event.consumer.topic=${CAMPAIGN_CATALOG_UPDATE_CONSUMER_TOPIC:adserver.campaign.update}
kafka.campaign_catalog_update.event.consumer.dead.queue.topic=${CAMPAIGN_CATALOG_UPDATE_CONSUMER_DEAD_QUEUE_TOPIC:cps.campaign.update_dead}
kafka.campaign_catalog_update.event.consumer.retry.topic=${CAMPAIGN_CATALOG_UPDATE_CONSUMER_RETRY_TOPIC:cps.campaign.update_retry}
kafka.campaign_catalog_update.event.consumer.start=${CAMPAIGN_CATALOG_UPDATE_CONSUMER_START:true}
kafka.campaign_catalog_update.event.consumer.concurrency=${CAMPAIGN_CATALOG_UPDATE_CONSUMER_CONCURRENCY:1}
kafka.campaign_catalog_update.event.consumer.max.poll.interval.ms=${CAMPAIGN_CATALOG_UPDATE_CONSUMER_MAX_POLL_INTERVAL_MS:3600000}
kafka.campaign_catalog_update.event.consumer.batch.size=${CAMPAIGN_CATALOG_UPDATE_CONSUMER_BATCH_SIZE:10}

#ingestion-interaction-event
kafka.ingestion.interaction.event.consumer.id=${INGESTION_INTERACTION_EVENT_CONSUMER_ID:adIngestionInteractionEventConsumer}
kafka.ingestion.interaction.event.consumer.confluent.id=${INGESTION_CONFLUENT_INTERACTION_EVENT_CONSUMER_ID:cpsIngestionConfluentInteractionEventConsumer}
kafka.ingestion.interaction.event.consumer.topics=${INGESTION_INTERACTION_EVENT_TOPICS:rt_ad_click,rt_ad_shared,rt_ad_wishlisted}
kafka.ingestion.interaction.event.consumer.dead.queue.topic=${INGESTION_INTERACTION_EVENTS_DEAD_QUEUE_TOPIC:cps.ingestion-events.interaction.dead.queue}
kafka.ingestion.interaction.event.consumer.start=${INGESTION_INTERACTION_EVENT_CONSUMER_START:true}
kafka.ingestion.interaction.event.consumer.concurrency=${INGESTION_INTERACTION_EVENT_CONSUMER_CONCURRENCY:1}
kafka.ingestion.interaction.event.consumer.max.poll.interval.ms=${INGESTION_INTERACTION_EVENT_CONSUMER_MAX_POLL_INTERVAL_MS:120000}
kafka.ingestion.interaction.event.consumer.batch.size=${INGESTION_INTERACTION_EVENT_CONSUMER_BATCH_SIZE:10}

#interaction-event consumer
kafka.adserver.interaction.event.consumer.id=${INTERACTION_EVENT_CONSUMER_ID:adServiceInteractionEventsProcessor}
kafka.adserver.interaction.event.consumer.topic=${INTERACTION_EVENT_CONSUMER_TOPIC:ad_service.interactions}
kafka.adserver.interaction.event.consumer.dead.queue.topic=${INTERACTION_EVENT_CONSUMER_DEAD_QUEUE_TOPIC:cps.adinteraction.dead.queue}
kafka.adserver.interaction.event.consumer.start=${INTERACTION_EVENT_CONSUMER_START:true}
kafka.adserver.interaction.event.consumer.concurrency=${INTERACTION_EVENT_CONSUMER_CONCURRENCY:1}
kafka.adserver.interaction.event.consumer.max.poll.interval.ms=${INTERACTION_EVENT_CONSUMER_CONSUMER_MAX_POLL_INTERVAL_MS:120000}
kafka.adserver.interaction.event.consumer.batch.size=${INTERACTION_EVENT_CONSUMER_BATCH_SIZE:10}

#ad-widget-view-event consumer
kafka.display_ad.widget.view.event.consumer.id=${AD_WIDGET_VIEW_EVENT_CONSUMER_ID:adWidgetViewEventsProcessor}
kafka.display_ad.widget.view.event.consumer.topic=${AD_WIDGET_VIEW_EVENT_CONSUMER_TOPIC:rt_ad_widget_views}
kafka.display_ad.widget.view.event.consumer.dead.queue.topic=${AD_WIDGET_VIEW_EVENT_CONSUMER_DEAD_QUEUE_TOPIC:cps.ad-widget-view.dead.queue}
kafka.display_ad.widget.view.event.consumer.start=${AD_WIDGET_VIEW_EVENT_CONSUMER_START:true}
kafka.display_ad.widget.view.event.consumer.concurrency=${AD_WIDGET_VIEW_EVENT_CONSUMER_CONCURRENCY:1}
kafka.display_ad.widget.view.event.consumer.max.poll.interval.ms=${AD_WIDGET_VIEW_EVENT_CONSUMER_MAX_POLL_INTERVAL_MS:120000}
kafka.display_ad.widget.view.event.consumer.batch.size=${AD_WIDGET_VIEW_EVENT_CONSUMER_BATCH_SIZE:10}

#ad-widget-click event consumer
kafka.display_ad.widget.click.event.consumer.id=${AD_WIDGET_CLICK_EVENT_CONSUMER_ID:adWidgetClickEventsProcessor}
kafka.display_ad.widget.click.event.consumer.topic=${AD_WIDGET_CLICK_EVENT_CONSUMER_TOPIC:rt_widget_clicked}
kafka.display_ad.widget.click.event.consumer.dead.queue.topic=${AD_WIDGET_CLICK_EVENT_CONSUMER_DEAD_QUEUE_TOPIC:cps.ad-widget-click.dead.queue}
kafka.display_ad.widget.click.event.consumer.start=${AD_WIDGET_CLICK_EVENT_CONSUMER_START:true}
kafka.display_ad.widget.click.event.consumer.concurrency=${AD_WIDGET_CLICK_EVENT_CONSUMER_CONCURRENCY:1}
kafka.display_ad.widget.click.event.consumer.max.poll.interval.ms=${AD_WIDGET_CLICK_EVENT_CONSUMER_MAX_POLL_INTERVAL_MS:120000}
kafka.display_ad.widget.click.event.consumer.batch.size=${AD_WIDGET_CLICK_EVENT_CONSUMER_BATCH_SIZE:10}

#dayWise performance event consumer
kafka.dayWisePerf.event.consumer.id=${DAY_PERF_EVENTS_CONSUMER_ID:dayWisePerformanceEventsProcessor}
kafka.dayWisePerf.event.consumer.topic=${DAY_PERF_EVENTS_CONSUMER_TOPIC:cps.dayWisePerf}
kafka.dayWisePerf.event.consumer.dead.queue.topic=${DAY_PERF_EVENTS_CONSUMER_DEAD_QUEUE_TOPIC:cps.dayWisePerf.dead.queue}
kafka.dayWisePerf.event.consumer.retry.topic=${DAY_PERF_EVENTS_CONSUMER_RETRY_TOPIC:cps.dayWisePerf.retry}
kafka.dayWisePerf.event.consumer.start=${DAY_PERF_EVENTS_CONSUMER_START:true}
kafka.dayWisePerf.event.consumer.concurrency=${DAY_PERF_EVENTS_CONSUMER_CONCURRENCY:1}
kafka.dayWisePerf.event.consumer.max.poll.interval.ms=${DAY_PERF_EVENTS_CONSUMER_MAX_POLL_INTERVAL_MS:600000}
kafka.dayWisePerf.event.consumer.batch.size=${DAY_PERF_EVENTS_CONSUMER_BATCH_SIZE:50}
kafka.dayWisePerf.campaign.catalog.date.batch.size=${DAY_PERF_CAMPAIGN_CATALOG_DATE_BATCH_SIZE:30}

#ingestion-view-event-consumer
kafka.ingestion.view.event.consumer.id=${INGESTION_VIEW_EVENT_CONSUMER_ID:cpsIngestionViewEventConsumer}
kafka.ingestion.view.event.consumer.confluent.id=${INGESTION_CONFLUENT_VIEW_EVENT_CONSUMER_ID:cpsIngestionConfluentViewEventConsumer}
kafka.ingestion.view.event.consumer.topics=${INGESTION_VIEW_EVENT_TOPICS:rt_ad_view,rt_anonymous_ad_view}
kafka.ingestion.view.event.consumer.dead.queue.topic=${INGESTION_VIEW_EVENT_CONSUMER_DEAD_QUEUE_TOPIC:cps.ingestion-events.view.dead.queue}
kafka.ingestion.view.event.consumer.start=${INGESTION_VIEW_EVENT_CONSUMER_START:true}
kafka.ingestion.view.event.consumer.concurrency=${INGESTION_VIEW_EVENT_CONSUMER_CONCURRENCY:1}
kafka.ingestion.view.event.consumer.max.poll.interval.ms=${INGESTION_VIEW_EVENT_CONSUMER_MAX_POLL_INTERVAL_MS:300000}
kafka.ingestion.view.event.consumer.batch.size=${INGESTION_VIEW_EVENT_CONSUMER_BATCH_SIZE:10}
kafka.ingestion.view.event.consumer.batch.interval.ms=${INGESTION_VIEW_EVENT_CONSUMER_BATCH_INTERVAL_MS:120000}

#realtime_presto consumer
kafka.presto.scheduler.event.consumer.id=${PRESTO_SCHEDULER_EVENT_CONSUMER_ID:prestoEventsProcessor}
kafka.presto.scheduler.event.consumer.topic=${PRESTO_SCHEDULER_EVENT_CONSUMER_TOPIC:cps.rt_presto_scheduler_run}
kafka.presto.scheduler.event.consumer.dead.queue.topic=${PRESTO_SCHEDULER_EVENT_CONSUMER_DEAD_QUEUE_TOPIC:cps.rt_presto_scheduler_run.dead.queue}
kafka.presto.scheduler.event.consumer.retry.topic=${PRESTO_SCHEDULER_EVENT_CONSUMER_RETRY_TOPIC:cps.rt_presto_scheduler_run.retry}
kafka.presto.scheduler.event.consumer.start=${PRESTO_SCHEDULER_EVENT_CONSUMER_START:true}
kafka.presto.scheduler.event.consumer.concurrency=${PRESTO_SCHEDULER_EVENT_CONSUMER_CONCURRENCY:1}
kafka.presto.scheduler.event.consumer.max.poll.interval.ms=${PRESTO_SCHEDULER_EVENT_CONSUMER_CONSUMER_MAX_POLL_INTERVAL_MS:120000}
kafka.presto.scheduler.event.consumer.batch.size=${PRESTO_SCHEDULER_EVENT_CONSUMER_BATCH_SIZE:1}
kafka.presto.scheduler.event.consumer.max.immediate.retries=${PRESTO_SCHEDULER_EVENT_CONSUMER_MAX_IMMEDIATE_RETRIES:2}

#delayed retry event consumer
kafka.delayed_retry.event.consumer.id=${DELAYED_RETRY_CONSUMER_ID:cpsServiceDelayedRetryConsumer}
kafka.delayed_retry.event.consumer.topic=${DELAYED_RETRY_CONSUMER_TOPIC:cps.delayed-retry}
kafka.delayed_retry.event.consumer.start=${DELAYED_RETRY_CONSUMER_START:true}
kafka.delayed_retry.event.consumer.concurrency=${DELAYED_RETRY_CONSUMER_CONCURRENCY:1}
kafka.delayed_retry.event.consumer.max.poll.interval.ms=${DELAYED_RETRY_CONSUMER_MAX_POLL_INTERVAL_MS:600000}
kafka.delayed_retry.event.consumer.batch.size=${DELAYED_RETRY_CONSUMER_BATCH_SIZE:50}

# feed commons config
feed.schemalessFields=
feed.allowedCLPFilterFields=wthn

fetch.active_campaign.es.scroll.timeout.minutes=${FETCH_ACTIVE_CAMPAIGNS_ES_SCROLL_TIMEOUT_MINUTES:10}
encryption.key.ads_metadata = ${ENCRYPTION_KEY_ADS_METADATA:DEFAULT}

# HBase realtime query configs
minutes_to_query_previous_day_data_from_hbase=${MINUTES_TO_QUERY_PREVIOUS_DAY_DATA_FROM_HBASE:120}
hbase.campaign.catalog.date.metrics.batch.size=${HBASE_CAMPAIGN_CATALOG_DATE_METRICS_BATCH_SIZE:20}

# presto webhook configs
presto.scheduler.run.webhook.enabled=${PRESTO_SCHEDULER_RUN_WEBHOOK_ENABLED:true}