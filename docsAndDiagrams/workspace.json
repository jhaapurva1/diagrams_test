{
  "id" : 1,
  "name" : "Ads - Campaign Performance Service(CPS)",
  "description" : "Tracks campaign related metrics",
  "lastModifiedDate" : "2023-09-11T10:35:22Z",
  "properties" : {
    "structurizr.dsl" : "d29ya3NwYWNlIGV4dGVuZHMgc3lzdGVtQ29udGV4dC5kc2wK"
  },
  "configuration" : { },
  "model" : {
    "people" : [ {
      "id" : "4",
      "tags" : "Element,Person",
      "properties" : {
        "structurizr.dsl.identifier" : "developer"
      },
      "name" : "Developer",
      "description" : "Uses the system for manual intervention for things like triggering a scheduler",
      "relationships" : [ {
        "id" : "66",
        "tags" : "Relationship",
        "properties" : {
          "structurizr.dsl.identifier" : "89f6610f-678c-454c-9c86-b362e7893de4"
        },
        "sourceId" : "4",
        "destinationId" : "15",
        "description" : "Gets staging data from"
      }, {
        "id" : "67",
        "sourceId" : "4",
        "destinationId" : "11",
        "description" : "Gets staging data from",
        "linkedRelationshipId" : "66"
      }, {
        "id" : "68",
        "sourceId" : "4",
        "destinationId" : "6",
        "description" : "Gets staging data from",
        "linkedRelationshipId" : "66"
      }, {
        "id" : "69",
        "tags" : "Relationship",
        "properties" : {
          "structurizr.dsl.identifier" : "bba2a8d1-13f8-42aa-b173-9d8617c8833f"
        },
        "sourceId" : "4",
        "destinationId" : "16",
        "description" : "Triggers schedulers manually using"
      }, {
        "id" : "70",
        "tags" : "Relationship",
        "properties" : {
          "structurizr.dsl.identifier" : "a51f67f0-8dcd-43e7-b77e-1700f5cc8fa9"
        },
        "sourceId" : "4",
        "destinationId" : "12",
        "description" : "Triggers backfilling of missed campaign data using"
      }, {
        "id" : "71",
        "tags" : "Relationship",
        "properties" : {
          "structurizr.dsl.identifier" : "13a11bfd-4ecd-4aa1-b547-4bc27ceb2c4e"
        },
        "sourceId" : "4",
        "destinationId" : "13",
        "description" : "Triggers backfilling of missed events using"
      } ],
      "location" : "Unspecified"
    } ],
    "softwareSystems" : [ {
      "id" : "1",
      "tags" : "Element,Software System",
      "properties" : {
        "structurizr.dsl.identifier" : "cms"
      },
      "name" : "Campaign Management Service",
      "relationships" : [ {
        "id" : "72",
        "tags" : "Relationship",
        "properties" : {
          "structurizr.dsl.identifier" : "d4fd24ed-22ea-414c-a7b5-233b658bf559"
        },
        "sourceId" : "1",
        "destinationId" : "14",
        "description" : "Gets campaign performance data from"
      }, {
        "id" : "73",
        "sourceId" : "1",
        "destinationId" : "11",
        "description" : "Gets campaign performance data from",
        "linkedRelationshipId" : "72"
      }, {
        "id" : "74",
        "sourceId" : "1",
        "destinationId" : "6",
        "description" : "Gets campaign performance data from",
        "linkedRelationshipId" : "72"
      } ],
      "location" : "Unspecified",
      "documentation" : { }
    }, {
      "id" : "2",
      "tags" : "Element,Software System",
      "properties" : {
        "structurizr.dsl.identifier" : "ingestionkafka"
      },
      "name" : "Ingestion Kafka",
      "location" : "Unspecified",
      "documentation" : { }
    }, {
      "id" : "3",
      "tags" : "Element,Software System",
      "properties" : {
        "structurizr.dsl.identifier" : "adspayment"
      },
      "name" : "Ads Payment Service",
      "relationships" : [ {
        "id" : "63",
        "tags" : "Relationship",
        "properties" : {
          "structurizr.dsl.identifier" : "b865f5b5-ab29-4265-ac47-8107380fa7b2"
        },
        "sourceId" : "3",
        "destinationId" : "14",
        "description" : "Gets budget data from"
      }, {
        "id" : "64",
        "sourceId" : "3",
        "destinationId" : "11",
        "description" : "Gets budget data from",
        "linkedRelationshipId" : "63"
      }, {
        "id" : "65",
        "sourceId" : "3",
        "destinationId" : "6",
        "description" : "Gets budget data from",
        "linkedRelationshipId" : "63"
      } ],
      "location" : "Unspecified",
      "documentation" : { }
    }, {
      "id" : "5",
      "tags" : "Element,Software System",
      "properties" : {
        "structurizr.dsl.identifier" : "presto"
      },
      "name" : "Presto",
      "location" : "Unspecified",
      "documentation" : { }
    }, {
      "id" : "6",
      "tags" : "Element,Software System,System-Under-Consideration",
      "properties" : {
        "structurizr.dsl.identifier" : "cps"
      },
      "name" : "Campaign Performance Service(CPS)",
      "description" : "Tracks campaign related metrics",
      "relationships" : [ {
        "id" : "29",
        "sourceId" : "6",
        "destinationId" : "5",
        "description" : "fetches orders/revenue/catalog level cpc data from",
        "linkedRelationshipId" : "28"
      }, {
        "id" : "35",
        "sourceId" : "6",
        "destinationId" : "1",
        "description" : "fetches supplier-id for a particular campaign-catalog from",
        "linkedRelationshipId" : "33"
      }, {
        "id" : "48",
        "sourceId" : "6",
        "destinationId" : "2",
        "description" : "Consumes clicks/interaction events from",
        "linkedRelationshipId" : "46"
      } ],
      "location" : "Unspecified",
      "containers" : [ {
        "id" : "10",
        "tags" : "Element,Container,Database",
        "properties" : {
          "structurizr.dsl.identifier" : "database"
        },
        "name" : "MongoDB",
        "description" : "Database",
        "technology" : "MongoDB",
        "documentation" : { }
      }, {
        "id" : "11",
        "tags" : "Element,Container",
        "properties" : {
          "structurizr.dsl.identifier" : "apiapp"
        },
        "name" : "API-application",
        "relationships" : [ {
          "id" : "76",
          "sourceId" : "11",
          "destinationId" : "10",
          "description" : "Gets campaign performance data from",
          "linkedRelationshipId" : "75"
        } ],
        "technology" : "Java SpringBoot",
        "components" : [ {
          "id" : "15",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "debugcontroller"
          },
          "name" : "Debug Controller",
          "relationships" : [ {
            "id" : "77",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "1f25590e-029d-4bf8-9695-200fba4a591f"
            },
            "sourceId" : "15",
            "destinationId" : "10",
            "description" : "Gets data from"
          } ],
          "documentation" : { }
        }, {
          "id" : "12",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "backfillcampaigndatacontroller"
          },
          "name" : "Backfill Campaign Data Controller",
          "relationships" : [ {
            "id" : "78",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "b3fe545c-eaa9-42b1-b6e4-5a6479615c0c"
            },
            "sourceId" : "12",
            "destinationId" : "10",
            "description" : "Saves data in"
          } ],
          "documentation" : { }
        }, {
          "id" : "13",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "backfillmissedeventscontroller"
          },
          "name" : "Backfill Missed Events Controller",
          "relationships" : [ {
            "id" : "79",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "4a547055-25e9-4e06-81ab-48563df451ca"
            },
            "sourceId" : "13",
            "destinationId" : "10",
            "description" : "Saves data in"
          } ],
          "documentation" : { }
        }, {
          "id" : "16",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "manualschedulercontroller"
          },
          "name" : "Manual Scheduler Controller",
          "documentation" : { }
        }, {
          "id" : "14",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "campaignperformancecontroller"
          },
          "name" : "Campaign Performance Controller",
          "relationships" : [ {
            "id" : "75",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "068b72dc-3e3a-4fbd-8de2-3e04ef06636a"
            },
            "sourceId" : "14",
            "destinationId" : "10",
            "description" : "Gets campaign performance data from"
          } ],
          "documentation" : { }
        } ],
        "documentation" : { }
      }, {
        "id" : "8",
        "tags" : "Element,Container,Database",
        "properties" : {
          "structurizr.dsl.identifier" : "databasecomponent"
        },
        "name" : "Relational Database",
        "description" : "In context of CPS it is just used to store scheduler offsets",
        "group" : "Shared across all ads",
        "technology" : "MySQL",
        "documentation" : { }
      }, {
        "id" : "7",
        "tags" : "Element,Container,Database",
        "properties" : {
          "structurizr.dsl.identifier" : "cachecomponent"
        },
        "name" : "Cache",
        "description" : "In context of CPS, it stores User Interaction data and Campaign Catalog date keys",
        "group" : "Shared across all ads",
        "technology" : "Redis",
        "documentation" : { }
      }, {
        "id" : "17",
        "tags" : "Element,Container",
        "properties" : {
          "structurizr.dsl.identifier" : "scheduler"
        },
        "name" : "Schedulers",
        "relationships" : [ {
          "id" : "28",
          "tags" : "Relationship,Scheduled-Run",
          "properties" : {
            "structurizr.dsl.identifier" : "4c9c4400-3ce2-424b-863b-5e0a91e849c2"
          },
          "sourceId" : "17",
          "destinationId" : "5",
          "description" : "fetches orders/revenue/catalog level cpc data from"
        }, {
          "id" : "31",
          "tags" : "Relationship",
          "properties" : {
            "structurizr.dsl.identifier" : "94998ada-f01d-472f-b79b-3a6f1b8d3b0a"
          },
          "sourceId" : "17",
          "destinationId" : "8",
          "description" : "Saves scheduler offsets to"
        }, {
          "id" : "34",
          "sourceId" : "17",
          "destinationId" : "1",
          "description" : "fetches supplier-id for a particular campaign-catalog from",
          "linkedRelationshipId" : "33"
        }, {
          "id" : "37",
          "sourceId" : "17",
          "destinationId" : "10",
          "description" : "Writes campaign-catalog-date-metrics-collection to",
          "linkedRelationshipId" : "36"
        }, {
          "id" : "39",
          "sourceId" : "17",
          "destinationId" : "7",
          "description" : "Writes campaign-catalog-date keys to",
          "linkedRelationshipId" : "38"
        }, {
          "id" : "44",
          "sourceId" : "17",
          "destinationId" : "9",
          "description" : "Publishes campaign-catalog-date keys to",
          "linkedRelationshipId" : "43"
        } ],
        "components" : [ {
          "id" : "18",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "campaignperformancescheduler"
          },
          "name" : "Campaign Performance Scheduler",
          "relationships" : [ {
            "id" : "32",
            "tags" : "Relationship,scheduler-presto-fetch",
            "properties" : {
              "structurizr.dsl.identifier" : "11f26bf5-2d50-4884-ad9e-684af1f44ad6"
            },
            "sourceId" : "18",
            "destinationId" : "5",
            "description" : "fetches orders/revenue data from"
          }, {
            "id" : "33",
            "tags" : "Relationship,scheduler-cms-fetch",
            "properties" : {
              "structurizr.dsl.identifier" : "128f5232-1c0d-4058-afd0-9bff8f5c158a"
            },
            "sourceId" : "18",
            "destinationId" : "1",
            "description" : "fetches supplier-id for a particular campaign-catalog from"
          }, {
            "id" : "36",
            "tags" : "Relationship,scheduler-db-write",
            "properties" : {
              "structurizr.dsl.identifier" : "bef2f71c-ee3d-4a0e-9683-c2c4b8ab336d"
            },
            "sourceId" : "18",
            "destinationId" : "10",
            "description" : "Writes campaign-catalog-date-metrics-collection to"
          }, {
            "id" : "38",
            "tags" : "Relationship,scheduler-cache-write",
            "properties" : {
              "structurizr.dsl.identifier" : "ab6a2fe0-06eb-4d2b-a1c9-a1d6e581db3f"
            },
            "sourceId" : "18",
            "destinationId" : "7",
            "description" : "Writes campaign-catalog-date keys to"
          } ],
          "documentation" : { }
        }, {
          "id" : "19",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "catalogcpcdiscountscheduler"
          },
          "name" : "Catalog CPC Discount Scheduler",
          "relationships" : [ {
            "id" : "40",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "36082eb2-8fc9-4774-99c2-5fbd90bc8676"
            },
            "sourceId" : "19",
            "destinationId" : "5",
            "description" : "Fetches catalog level cpc discount data from"
          }, {
            "id" : "41",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "3c10c9a2-9757-4903-aa18-bb72692b1080"
            },
            "sourceId" : "19",
            "destinationId" : "10",
            "description" : "Writes catalog-cpc-discount-collection to"
          } ],
          "documentation" : { }
        }, {
          "id" : "20",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "daywiseperformanceeventsscheduler"
          },
          "name" : "Daywise Performance Events Scheduler",
          "relationships" : [ {
            "id" : "42",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "0abf652b-8dee-484f-9a97-5d862a9bff0c"
            },
            "sourceId" : "20",
            "destinationId" : "7",
            "description" : "fetches campaign-catalog-date keys from"
          }, {
            "id" : "43",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "dee9c0c2-f506-4a4d-8647-33d0ca5e5c5c"
            },
            "sourceId" : "20",
            "destinationId" : "9",
            "description" : "Publishes campaign-catalog-date keys to"
          } ],
          "documentation" : { }
        } ],
        "documentation" : { }
      }, {
        "id" : "21",
        "tags" : "Element,Container",
        "properties" : {
          "structurizr.dsl.identifier" : "listener"
        },
        "name" : "Listener",
        "relationships" : [ {
          "id" : "30",
          "tags" : "Relationship",
          "properties" : {
            "structurizr.dsl.identifier" : "116e7b2d-42cc-4a0d-b060-b4ed9c0dc29e"
          },
          "sourceId" : "21",
          "destinationId" : "9",
          "description" : "Consumes from and Publishes to"
        }, {
          "id" : "47",
          "sourceId" : "21",
          "destinationId" : "2",
          "description" : "Consumes clicks/interaction events from",
          "linkedRelationshipId" : "46"
        }, {
          "id" : "51",
          "sourceId" : "21",
          "destinationId" : "17",
          "description" : "Triggers the corresponsing scheduler",
          "linkedRelationshipId" : "50"
        }, {
          "id" : "54",
          "sourceId" : "21",
          "destinationId" : "1",
          "description" : "Fecthes SupplierCampaignCatalogMetaDataResponse from",
          "linkedRelationshipId" : "53"
        }, {
          "id" : "56",
          "sourceId" : "21",
          "destinationId" : "10",
          "description" : "Fetches campaign’s, supplier’s and real-estate’s budgetUtilised data from",
          "linkedRelationshipId" : "55"
        }, {
          "id" : "59",
          "sourceId" : "21",
          "destinationId" : "7",
          "description" : "Add campaign catalog date keys to",
          "linkedRelationshipId" : "58"
        } ],
        "components" : [ {
          "id" : "24",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "daywiseperformancemetricslistener"
          },
          "name" : "Day Wise Performance Metrics Listener",
          "documentation" : { }
        }, {
          "id" : "26",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "adinteractioneventlistener"
          },
          "name" : "Ad Interaction Event Listener",
          "relationships" : [ {
            "id" : "52",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "4d09187c-8c0c-4b35-b95c-f237b1a87e59"
            },
            "sourceId" : "26",
            "destinationId" : "2",
            "description" : "Consumes interaction events from"
          }, {
            "id" : "53",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "21c8fcba-57ea-40c5-80fd-c1ff15821992"
            },
            "sourceId" : "26",
            "destinationId" : "1",
            "description" : "Fecthes SupplierCampaignCatalogMetaDataResponse from"
          }, {
            "id" : "55",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "29c2e9ea-fcec-4212-966e-5c5ba43b82ce"
            },
            "sourceId" : "26",
            "destinationId" : "10",
            "description" : "Fetches campaign’s, supplier’s and real-estate’s budgetUtilised data from"
          }, {
            "id" : "57",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "7b8eec4c-53b6-4ac7-bd6c-b02c733ee51b"
            },
            "sourceId" : "26",
            "destinationId" : "9",
            "description" : "Publishes budget exhaust event to"
          }, {
            "id" : "58",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "3fae82a8-3e77-4727-9d16-16a51c4bbc5d"
            },
            "sourceId" : "26",
            "destinationId" : "7",
            "description" : "Add campaign catalog date keys to"
          } ],
          "documentation" : { }
        }, {
          "id" : "27",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "unpartitionedingestionconfluentkafkainteractioneventlistener"
          },
          "name" : "UnPartitioned Ingestion Confluent Kafka Interaction Event Listener",
          "relationships" : [ {
            "id" : "46",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "4438a3e6-ef28-4234-ac33-62b48bb9d672"
            },
            "sourceId" : "27",
            "destinationId" : "2",
            "description" : "Consumes clicks/interaction events from"
          }, {
            "id" : "49",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "44fb0cd1-d082-4d5f-ad79-8ad3d4184a92"
            },
            "sourceId" : "27",
            "destinationId" : "9",
            "description" : "Publishes interaction events/exception events to"
          } ],
          "documentation" : { }
        }, {
          "id" : "22",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "prestoschedulereventlistener"
          },
          "name" : "Presto Scheduler Event Listener",
          "relationships" : [ {
            "id" : "45",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "2dd7a7c5-d69f-43f1-b72d-37098f8d3414"
            },
            "sourceId" : "22",
            "destinationId" : "9",
            "description" : "Consumes scheduler run messages from"
          }, {
            "id" : "50",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "e785366f-5b1e-4f72-ba76-a5b9c5534b49"
            },
            "sourceId" : "22",
            "destinationId" : "17",
            "description" : "Triggers the corresponsing scheduler"
          } ],
          "documentation" : { }
        }, {
          "id" : "25",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "ingestionconfluentkafkavieweventslistener"
          },
          "name" : "Ingestion Confluent Kafka View Events Listener",
          "relationships" : [ {
            "id" : "60",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "864d5d4c-52a8-4956-afe4-751c024ead33"
            },
            "sourceId" : "25",
            "destinationId" : "2",
            "description" : "Consumes view events from"
          }, {
            "id" : "61",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "0bc1a3c7-11b9-40cc-b2cb-fe78a303c3b7"
            },
            "sourceId" : "25",
            "destinationId" : "1",
            "description" : "Fecthes AdViewEventMetadataResponse from"
          }, {
            "id" : "62",
            "tags" : "Relationship",
            "properties" : {
              "structurizr.dsl.identifier" : "0ca06b6f-671b-4ade-857f-989571d613cd"
            },
            "sourceId" : "25",
            "destinationId" : "10",
            "description" : "Batch up view counts at a campaign-catalog-date level in JVM and writes to"
          } ],
          "documentation" : { }
        }, {
          "id" : "23",
          "tags" : "Element,Component",
          "properties" : {
            "structurizr.dsl.identifier" : "adviewcampaigncatalogcacheupdateeventlistener"
          },
          "name" : "Ad View Campaign Catalog Cache Update Event Listener",
          "documentation" : { }
        } ],
        "documentation" : { }
      }, {
        "id" : "9",
        "tags" : "Element,Container",
        "properties" : {
          "structurizr.dsl.identifier" : "adskafka"
        },
        "name" : "Ads Kafka",
        "group" : "Shared across all ads",
        "technology" : "Kafka",
        "documentation" : { }
      } ],
      "documentation" : { }
    } ]
  },
  "documentation" : {
    "sections" : [ {
      "content" : "# Campaign Performance System Overview\n>\n>\nResponsible of taking the events of click, views and other interaction and tracking the campaign perforamnce.\nAlso responsible for charging clicks and adjusting budgets for active campaigns\n\n## System Context\n\nIn the following diagram, we can see how does our service interacts with rest of the services. \n\n> ![](embed:CPS-SystemContext)\n>\n> \nEach of the services are explained below:\n\n| Service                     | Description                                                                                                                    |\n|-----------------------------|--------------------------------------------------------------------------------------------------------------------------------|\n| Campaign Management Service | Responsible for managing the e2e flow of campaigns i.e pre-creation recommendation, creation and edit, campaign pause and stop |\n| Ads Payment Service         | Bulk fetches data from presto and bulk pushes data to kafka                                                                    |\n| Presto                      | Responsible for having data generated by analytical model or sending data back for analytics                                   |\n| Ingestion Kafka             | Responsible for having data generated by analytical model or sending data back for analytics                                   |\n\n## Deployments\n\n| EKS Service Name              | Description                                                          | Criticality |\n|-------------------------------|----------------------------------------------------------------------|-------------|\n| campaign-performace-new       | Tracks performance of a campaign                                     | P0          |\n| campaign-performace-cron      | Bulk fetches data from presto and bulk pushes data to kafka          | P1          |\n| campaign-performance-consumer | Consumes data from ingestion kafka and populates in relevant source  | P0          |\n\n## System Architecture\n\n> ![](embed:CPS-Containers)\n\n## Components\n\n### Scheduler component\n![](embed:Schedulers)\n>\n> **Campaign-performance-scheduler**\n> 1. Fetches orders/revenue data from presto\n> 2. Fetches supplier-id from ads-admin for a particular campaign-catalog\n> 3. Writes to mongo-db (campaign-catalog-date-metrics-collection)\n> 4. Writes campaign-catalog-date keys to cache\n>\n> **Catalog-cpc-discount scheduler**\n> 1. Fetches catalog level cpc discount data from presto\n> 2. Writes to mongo-db (catalog-cpc-discount-collection)\n>\n> **Day-wise-perf scheduler**\n> 1. fetches campaign-catalog-date keys from cache (keys of documents that got updated in mongodb)\n> 2. Publishes these keys to kafka\n> 3. Then the listener of this kafka fetches data for these keys from mongodb (reads from campaign-catalog-date-metrics-collection)\n> 4. The listener produces a prism event of this data\n\n### Listener component\n>> ![](embed:Listener)\n> \n> **UnPartitionedIngestionConfluentKafkaInteractionEventListener**\n> 1. Consumes from ingestion kafka topic (rt_ad_click,rt_ad_shared,rt_ad_wishlisted,rt_anonymous_ad_click,rt_anonymous_ad_shared,rt_anonymous_ad_wishlisted)\n> 2. Publishes to internal kafka topic (ad_service.interactions) with catalogId as a key\n> 3. Publishes to dead-queue (cps_new.adinteraction.dead.queue) topic in case of any exceptions\n>\n> **AdInteractionEventListener**\n> 1. Consumes from ad_service.interactions topic\n> 2. Calls ads-admin to get SupplierCampaignCatalogMetaDataResponse using API (api/v1/campaign/supplier_campaign_catalog_metadata)\n> 3. Fetch campaign’s, supplier’s and real-estate’s budgetUtilised data from MongoDb(campaign-date-wise-metrics-collection, campaign-metrics-collection, supplier-week-wise-metrics-collection), And publish budget-exhaust events if budget is already exhausted. Also discards the click if budget utilised has overshot the allowed overshoot limit.\n> 4. Perform window de-duplication\n> 5. Increment click count and budget-utilised in all mongodb collections\n> 6. Publish budget exhausted events if budget gets exhausted after taking the current click into account\n> 7. Add campaign-catalog-date key to redis set (redis key prefix - new_ucc) ---- to keep track of updated records\n> 8. Publishes telegraf metrics and Prism events for every status of click processing (Success, failure, duplicate, invalid etc.)\n>\n> **IngestionConfluentKafkaViewEventsListener**\n> 1. Consumes from ingestion kafka topics (rt_ad_view,rt_anonymous_ad_view)\n> 2. Publishes to dead-queue (cps_new.ingestion-events.view.dead.queue) in case of any exception in processing\n> 3. Calls ads-admin to fetch AdViewEventMetadataResponse using API (/api/v1/campaign/get_ad_view_catalog_campaign_metadata)\n> 4. Batch up view counts at a campaign-catalog-date level in JVM and writes to mongodb (campaign-catalog-date-metrics-collection) every 5 minutes\n> 5. Publishes telegraf metrics at every stage of processing\n>\n> **DayWisePerformanceMetricsListener**\n> 1. Consumed from topic (cps_new.dayWisePerf) -----\n> 2. Deletes consumed keys from UpdatedCampaignCatalogCache in redis\n> 3. Fetch document for the given key from mongo-db (campaign-catalog-date-metrics-collection)\n> 4. Publish a prism event (DayWisePerformancePrismEvent) to write to presto table\n>\n> **AdViewCampaignCatalogCacheUpdateEventListener**\n> 1. Consumed from topic (cps.ad_view_campaign_catalog_cache_update)\n> 2. Published a RedisPubSub event to update local caffine cache (adViewCampaignCatalogCache) in all machines\n> 3. Publishes to dead-queue topic (cps_new.ad_view_campaign_catalog_cache_update.dead.queue) in case of any exception\n>\n> **PrestoSchedulerEventListener**\n> 1. Consumes from topic (cps.rt_presto_scheduler_run)\n> 2. Triggers the corresponding scheduler\n> 3. Publishes to dead-queue topic in case of scheduler failure or any other exception\n\n### API component\n![](embed:API-Application)\n> **CampaignPerformanceController**\n> \n> 1. api/v1/supplier/performance (called by ads-admin for supplier-panel)\n> -> For a given supplier-id and date-range, Fetch aggregated data on supplier-id level from mongoDb (collection - campaign-catalog-date-metrics-collection)\n> 2. api/v1//campaign/performance(called by ads-admin for supplier-panel)\n> -> For a given list of campaign-ids and date range, Aggregated data on campaing-id level from mongoDb (collection - campaign-catalog-date-metrics-collection)\n> 3. api/v1//campaign-catalog/performance(called by ads-admin for supplier-panel)\n> -> For a given campaign-id and a list of catalog-ids with date-range, Aggregated data on catalog-id level from mongoDb (collection - campaign-catalog-date-metrics-collection)\n> 4. api /v1//campaign/budget-utilised (called by ads-admin for verification checks on campaign CRUD ops)\n> -> For a given list campaign-ids and a list of supplier-ids, We provide budget-utilised data (current-date’s budget utilised for daily-budget-campaign-ids, total budget data for   total-budget-campaign-ids and currrent week’s budget utilised for supplier-ids). Collection used ---- campaign-date-wise-metrics-collection, campaign-metrics-collection, supplier-weekwise-metrics-collection\n> 5. api/v1/campaign-catalog-date/budget-utilised (called by ads-payment)\n> -> For a given list of campaign-catalog-dates, we fetch budget-utilised from mongodb(collection - campaign-catalog-date-metrics-collection)\n> 6. api/v1/get-active-campaigns (called by ads-payment)\n> -> For a given date, we scroll mongodb (campaign-catalog-date-metrics-collection) in batches (using a cursor on object-id) and fetch campaignId-catalogId whose budget-utilisation is non-zero\n> 7. api/v1//campaign-catalog/performance_date_wise (called by ads-admin for supplier-panel)\n> ->for a given campaign and date-range, we fetch date level performance metrics from mongodb(collection - campaign-catalog-date-metrics-collection)\n\n\n\n\n## Databases\n\n| Cluster name                             | Type   | Short description                                                                                                                                                                                                       |\n|------------------------------------------|--------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| bac-p-advertisement-new                  | MYSQL  | Primarily stores campaigns and related entities                                                                                                                                                                         |\n| advertisement-serving                    | Redis  | Caches fallback feed & Reco RE feed. Also caches campaign details required in serving flow. User sessions required for pagination are also stored here                                                                  |\n| advertisement-views                      | Redis  | Stores daily user-catalog view counts. These are used in serving flow to filter out catalogs which are already seen by the user on that day                                                                             |\n| bac-p-advertisement-reco-hbase-v2        | Hbase  | Consists of similar catalogs data generated by DS team to serve on Reco RE                                                                                                                                              |\n| bac-p-advertisement-collections-hbase-v3 | Hbase  | - Stores Collections & CLP feed generated by DS team<br/>  - Stores bids of catalogs that are enabled for Auto CPC                                                                                                      |                                                                                                \n| bac-p-advertisement-hbase                | Hbase  | - Stores RE agnostic data required in serving flow(Ex: fallback feed scores, CPC normalization constants)<br/> - Also stores recommendations shown in supplier panel at various stages(Ex: budget recomendation..etc)   |                                                                                                \n| bac-p-advertisement                      | ES     | Contains index of catalog data with all attributes(price,rating,cpc,feed scores..etc. Used for generating fallback feed for FY/CLP/Collections. Also used for applying feed filters given by user on personalized feed) |                                                                                                \n| bac-p-advertisement-text-search          | ES     | Contains index of catalog data with all attributes required for text-searh(name,description,price,rating,cpc,feed scores..etc. Used for generating fallback feed for tex-search serving                                 |                                                                                                \n| bac-p-advertisement-spark-clp-collection | Spark  | Used for bulkloading Collections & CLP provided by DS team into Hbase                                                                                                                                                   |                                                                                                \n| bac-p-advertisement-spark                | Spark  | Used for bulkloading Reco real-estate DS feed into Hbase                                                                                                                                                                |                                                                                                \n| meesho-p-ads                             | S3     | Used as medium to share feeds between DS team and Ads team                                                                                                                                                              |                                                                                                \n| ads-feed-trigger                         | Lambda | Used for automatically triggering Spark jobs upon arrival of new DS feeds                                                                                                                                               |                                                                                                \n\n\n\n## Other resources\n\nAds confluence - https://meesho.atlassian.net/wiki/spaces/EW/pages/1360134195/Ads+Pod\n\nGrafana dashboard - https://grafana.meesho.com/d/OWhpWwsGz/adserver?orgId=1\n\n## Authors / Code Review\nApurva Jha <apurva.jha@meesho.com> ,\nAmit Poonia <amit.poonia@meesho.com>",
      "format" : "Markdown",
      "filename" : "doc.md",
      "order" : 1,
      "title" : ""
    } ],
    "decisions" : [ {
      "content" : "# CPS and MongoDB\n\n## Status\n\nAccepted\n\n## Context\n\n>CPS is a write heavy system with more than 30K writes per second while the read throughput is less than 2K reads per second. Which means having two separate db for read and writes was not required and was leading to unnecessary cost.\n>Since the ES sync was done via a background job, The data we showed to suppliers was not real-time. (Although for some APIs we redirected reads to HBase to make it real time but this couldn’t be done for all APIs as HBase doesn’t support aggregation queries)\n\n\n## Decision\n\n>Moving to a single db for both reads and writes. We chose MongoDB as it is a document based db.\n\n## Consequences\n\n>Total Savings ~ 8500 USD",
      "format" : "Markdown",
      "id" : "1",
      "title" : " CPS and MongoDB",
      "date" : "2023-09-11T10:35:22Z",
      "status" : "Accepted"
    }, {
      "content" : "# Coveo integration\n\n## Status\n\nPending\n\n## Context\n\n>Our code does not have a formatting library. Which means that there is not standard way that the code is formatted. This leads to a lot of time being wasted in code reviews and also makes it difficult to read the code.\n\n\n## Decision\n\n>Including coveo in our codebase. This will help us in formatting the code and also in code reviews.\n\n## Consequences\n\n>Developer productivity will increase. Code reviews will be faster and easier.",
      "format" : "Markdown",
      "id" : "2",
      "title" : " Coveo integration",
      "date" : "2023-09-11T10:35:22Z",
      "status" : "Pending"
    } ]
  },
  "views" : {
    "systemContextViews" : [ {
      "key" : "CPS-SystemContext",
      "order" : 1,
      "softwareSystemId" : "6",
      "automaticLayout" : {
        "implementation" : "Graphviz",
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "nodeSeparation" : 300,
        "edgeSeparation" : 0,
        "vertices" : false
      },
      "enterpriseBoundaryVisible" : true,
      "relationships" : [ {
        "id" : "29"
      }, {
        "id" : "74"
      }, {
        "id" : "35"
      }, {
        "id" : "65"
      }, {
        "id" : "68"
      }, {
        "id" : "48"
      } ],
      "elements" : [ {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "2",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "3",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "4",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "5",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "6",
        "x" : 0,
        "y" : 0
      } ]
    } ],
    "containerViews" : [ {
      "key" : "CPS-Containers",
      "order" : 2,
      "softwareSystemId" : "6",
      "paperSize" : "A3_Landscape",
      "dimensions" : {
        "width" : 4766,
        "height" : 2825
      },
      "externalSoftwareSystemBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "51"
      }, {
        "id" : "73"
      }, {
        "id" : "76"
      }, {
        "id" : "64"
      }, {
        "id" : "54"
      }, {
        "id" : "31"
      }, {
        "id" : "30"
      }, {
        "id" : "28"
      }, {
        "id" : "37"
      }, {
        "id" : "34"
      }, {
        "id" : "67"
      }, {
        "id" : "44"
      }, {
        "id" : "56"
      }, {
        "id" : "47"
      }, {
        "id" : "59"
      }, {
        "id" : "39"
      } ],
      "elements" : [ {
        "id" : "11",
        "x" : 2900,
        "y" : 825
      }, {
        "id" : "17",
        "x" : 2620,
        "y" : 2215
      }, {
        "id" : "1",
        "x" : 3720,
        "y" : 1690
      }, {
        "id" : "2",
        "x" : 365,
        "y" : 125
      }, {
        "id" : "3",
        "x" : 3485,
        "y" : 340
      }, {
        "id" : "4",
        "x" : 4140,
        "y" : 795
      }, {
        "id" : "5",
        "x" : 3710,
        "y" : 2235
      }, {
        "id" : "7",
        "x" : 1060,
        "y" : 1455
      }, {
        "id" : "8",
        "x" : 1030,
        "y" : 2175
      }, {
        "id" : "9",
        "x" : 320,
        "y" : 1430
      }, {
        "id" : "10",
        "x" : 2175,
        "y" : 660
      }, {
        "id" : "21",
        "x" : 1430,
        "y" : 630
      } ]
    } ],
    "componentViews" : [ {
      "key" : "Listener",
      "order" : 5,
      "paperSize" : "A2_Landscape",
      "dimensions" : {
        "width" : 5637,
        "height" : 2054
      },
      "containerId" : "21",
      "externalContainerBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "61"
      }, {
        "id" : "50"
      }, {
        "id" : "60"
      }, {
        "id" : "52"
      }, {
        "id" : "62",
        "vertices" : [ {
          "x" : 208,
          "y" : 929
        }, {
          "x" : 208,
          "y" : 1229
        } ]
      }, {
        "id" : "53"
      }, {
        "id" : "37"
      }, {
        "id" : "34"
      }, {
        "id" : "55"
      }, {
        "id" : "44",
        "vertices" : [ {
          "x" : 3120,
          "y" : 1380
        } ]
      }, {
        "id" : "45"
      }, {
        "id" : "57"
      }, {
        "id" : "46",
        "vertices" : [ {
          "x" : 4799,
          "y" : 694
        } ]
      }, {
        "id" : "58"
      }, {
        "id" : "49",
        "vertices" : [ {
          "x" : 5208,
          "y" : 1229
        } ]
      }, {
        "id" : "39"
      } ],
      "elements" : [ {
        "id" : "22",
        "x" : 2710,
        "y" : 620
      }, {
        "id" : "23",
        "x" : 4150,
        "y" : 620
      }, {
        "id" : "24",
        "x" : 3440,
        "y" : 620
      }, {
        "id" : "25",
        "x" : 1010,
        "y" : 625
      }, {
        "id" : "26",
        "x" : 1855,
        "y" : 625
      }, {
        "id" : "27",
        "x" : 4890,
        "y" : 635
      }, {
        "id" : "17",
        "x" : 2435,
        "y" : 1610
      }, {
        "id" : "1",
        "x" : 2000,
        "y" : 1225
      }, {
        "id" : "2",
        "x" : 2620,
        "y" : -5
      }, {
        "id" : "7",
        "x" : 3350,
        "y" : 1529
      }, {
        "id" : "9",
        "x" : 4060,
        "y" : 1270
      }, {
        "id" : "10",
        "x" : 195,
        "y" : 1310
      } ]
    }, {
      "key" : "API-Application",
      "order" : 3,
      "automaticLayout" : {
        "implementation" : "Graphviz",
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "nodeSeparation" : 300,
        "edgeSeparation" : 0,
        "vertices" : false
      },
      "containerId" : "11",
      "externalContainerBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "70"
      }, {
        "id" : "72"
      }, {
        "id" : "71"
      }, {
        "id" : "63"
      }, {
        "id" : "75"
      }, {
        "id" : "78"
      }, {
        "id" : "77"
      }, {
        "id" : "66"
      }, {
        "id" : "69"
      }, {
        "id" : "79"
      } ],
      "elements" : [ {
        "id" : "12",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "13",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "14",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "3",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "15",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "4",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "16",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "10",
        "x" : 0,
        "y" : 0
      } ]
    }, {
      "key" : "Schedulers",
      "order" : 4,
      "paperSize" : "A3_Landscape",
      "dimensions" : {
        "width" : 3866,
        "height" : 1454
      },
      "containerId" : "17",
      "externalContainerBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "36"
      }, {
        "id" : "40"
      }, {
        "id" : "41"
      }, {
        "id" : "42"
      }, {
        "id" : "33"
      }, {
        "id" : "43"
      }, {
        "id" : "32",
        "vertices" : [ {
          "x" : 1558,
          "y" : 733
        }, {
          "x" : 808,
          "y" : 929
        } ]
      }, {
        "id" : "38"
      } ],
      "elements" : [ {
        "id" : "1",
        "x" : 1708,
        "y" : 929
      }, {
        "id" : "5",
        "x" : 208,
        "y" : 929
      }, {
        "id" : "18",
        "x" : 1708,
        "y" : 329
      }, {
        "id" : "7",
        "x" : 2458,
        "y" : 929
      }, {
        "id" : "19",
        "x" : 958,
        "y" : 329
      }, {
        "id" : "9",
        "x" : 3208,
        "y" : 929
      }, {
        "id" : "20",
        "x" : 2458,
        "y" : 329
      }, {
        "id" : "10",
        "x" : 958,
        "y" : 929
      } ]
    } ],
    "configuration" : {
      "branding" : { },
      "styles" : {
        "elements" : [ {
          "tag" : "Database",
          "shape" : "Cylinder"
        }, {
          "tag" : "System-Under-Consideration",
          "background" : "#3b444b"
        } ],
        "relationships" : [ {
          "tag" : "Relationship",
          "dashed" : false
        }, {
          "tag" : "Scheduled-Run",
          "dashed" : true
        } ]
      },
      "themes" : [ "https://static.structurizr.com/themes/default/theme.json" ],
      "terminology" : { },
      "lastSavedView" : "CPS-Containers"
    }
  }
}